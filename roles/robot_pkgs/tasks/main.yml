---
# tasks file for robot-pkgs
- name: Add ROS key
  apt_key:
    id: C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
    url: http://packages.ros.org/ros.asc
    state: present
- name: Add ROS repository
  template:
    src: ros-packages.j2
    dest: /etc/apt/sources.list.d/ros-packages.list
    owner: root
    group: root
    mode: 0644
- name: Refresh apt cache
  apt:
    update_cache: yes
  ignore_errors: yes
- name: Install robot development packages
  apt:
    name: '{{ ros_packages }}'
    state: latest
- name: Create ROS profile entries
  blockinfile:
    path: '{{ global_profile_path }}'
    marker: "## {mark} ROS profile entries ##"
    block: |
      source /opt/ros/{{ ros_release }}/setup.bash
      export TURTLEBOT_3D_SENSOR={{ ros_release }}
  notify:
    - Suggest restart
- name: Init rosdep if missing
  command: rosdep init
  args:
    creates: /etc/ros/rosdep/sources.list.d/20-default.list
- name: Update rosdep for each user  # noqa 301
  command: rosdep update
  become: yes
  become_user: "{{ item.user }}"
  loop: "{{ real_users }}"
- name: Create Catkin workspace directory
  file:
    path: '{{ item.homedir }}/catkin_ws/src/'
    state: directory
    owner: '{{ item.uid }}'
    group: '{{ item.gid }}'
  loop: "{{ real_users }}"
- name: Init Catkin workspace
  shell: source /opt/ros/{{ ros_release }}/setup.bash && catkin_make
  args:
    executable: /bin/bash
    chdir: '{{ item.homedir }}/catkin_ws/'
    creates: '{{ item.homedir }}/catkin_ws/.catkin_workspace'
  become: yes
  become_user: "{{ item.user }}"
  loop: "{{ real_users }}"
- name: Copy documentation to desktop
  copy:
    src: usb-controllers.desktop
    dest: "{{ item.homedir }}/Desktop/usb-controllers.desktop"
    owner: "{{ item.uid }}"
    group: "{{ item.gid }}"
    mode: 0644
  loop: "{{ real_users }}"
- name: Copy Kobuki TurtleBot udev rule
  copy:
    src: "57-kobuki.rules"
    dest: "/etc/udev/rules.d/57-kobuki.rules"
    owner: "root"
    group: "root"
    mode: 0644
  notify:
    - Reload udev rules
- name: Check for missing USB 2/3 controllers
  shell: lspci | grep -i -e EHCI -e xHCI
  register: lspci_output
  ignore_errors: yes
  changed_when: false
- name: Alert missing USB 2/3 controllers
  # Something must be executed or Ansible errors
  command: /bin/true
  notify:
    - USB controllers warning
  when: lspci_output.rc == 1
