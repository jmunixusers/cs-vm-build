#!/usr/bin/env bash

# Performs basic bootstrapping to prepare a machine for the main cs-vm-build
# installation. Mostly, this installs a few dependencies and then runs an OEM
# Ansible playbook.

#--
# Emits a message to the user preceeded by ==> to stdout.
#
# Expected parameters:
#   $1: The string to print
#--
user () {
    echo "==> ${1}"
}

#---
# Emits an error message and exits the script to stderr.
#
# Expected parameters:
#  $1: The string to print
#---
error () {
    echo "!!! ${1}" 1>&2
    echo "Exiting." 1>&2
    exit 1
}

#---
# Installs VirtualBox Guest Additions if ISO file is present
#---
install_additions() {
    local isofile=/home/oem/VBoxGuestAdditions.iso

    if [ -f "$isofile" ]; then
        mkdir /home/oem/additions
        mount -o loop,ro "$isofile" /home/oem/additions

        # Guest additions installation returns error 2 on success
        /home/oem/additions/VBoxLinuxAdditions.run || true

        umount /home/oem/additions
        rm "$isofile"
    else
        user "VirtualBox Additions disk missing. Skipping installation."
    fi
}

#---
# Performs the actual preparation of the machine
#---
main () {
    if [ "$(id -u)" -ne "0" ]; then
        user "Not running as root. Automatically retrying with sudo."
        exec sudo "$0"
        exit $?
    fi

    user "Updating apt package cache"
    apt-get update

    user "Installing prerequisite packages"
    apt-get install -V ansible git aptitude gcc make perl \
        || error "Unable to install prerequisite packages"

    user "Attempting to install VBox Guest Additions"
    install_additions

    user "Running ansible OEM playbook"
    # Ensure this runs from the root directory of the Ansible git directory
    local project_dir
    project_dir="$(dirname "$(dirname "$0")")"
    cd "$project_dir" || error "Unable to cd to $project_dir"
    ansible-playbook -i hosts -c local -t oem oem.yml \
        || error "Playbook failed to complete successfully"
}

# Actually run the main function
main
